YOLOV5TorchObjectDetector(
  (model): Model(
    (model): Sequential(
      (0): Focus(
        (conv): Conv(
          (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
      )
      (1): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (2): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(64, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (3): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (4): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (1): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (2): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (5): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (6): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (1): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (2): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (7): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (8): SPP(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (m): ModuleList(
          (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)
          (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)
          (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)
        )
      )
      (9): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (10): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (11): Upsample(scale_factor=2.0, mode=nearest)
      (12): Concat()
      (13): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (14): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (15): Upsample(scale_factor=2.0, mode=nearest)
      (16): Concat()
      (17): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(128, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (18): Conv2d(128, 30, kernel_size=(1, 1), stride=(1, 1))
      (19): Conv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (20): Concat()
      (21): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(256, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (22): Conv2d(256, 30, kernel_size=(1, 1), stride=(1, 1))
      (23): Conv(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (bn): None
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
      )
      (24): Concat()
      (25): BottleneckCSP(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (cv2): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (cv4): Conv(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (bn): None
          (act): LeakyReLU(negative_slope=0.1, inplace=True)
        )
        (bn): BatchNorm2d(512, eps=0.0001, momentum=0.03, affine=True, track_running_stats=True)
        (act): LeakyReLU(negative_slope=0.1, inplace=True)
        (m): Sequential(
          (0): Bottleneck(
            (cv1): Conv(
              (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
            (cv2): Conv(
              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (bn): None
              (act): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
        )
      )
      (26): Conv2d(512, 30, kernel_size=(1, 1), stride=(1, 1))
      (27): Detect()
    )
  )
)